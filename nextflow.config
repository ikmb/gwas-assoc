params {
  input_imputed_glob = false
  fam = false
  //ANNO = $fam
  //ANNO = false

  disable_regenie = false
  phenofile = false
  additional_regenie_parameter = ""
  run_saige = true

  pca_dims = 10
  trait = "binary"

  saige_chunk_size = 20000

  tauInit="1,0"
  collection_name = "collection_name"
  output = "output/assoc"
  more_covars = "."
  more_covars_cols = ""
  //liftover = 0
  
  null_filter = "R2>0.8"

  disable_liftover = false
  ucsc_liftover = "" // points to base path where chain files and liftOver binary are found


  chrchr = 0 // should not be used anymore




	run_name = false

	plaintext_email = false

	logo = "${baseDir}/assets/ikmblogo.png"

	email = null

	maxMultiqcEmailFileSize = 25.MB

}

manifest {
  name = "ikmb/gwas-assoc"
  mainScript = 'Assoc.nf'
	version = "0.1"
	description = "IKMB GWAS Association Testing Pipeline"
	author = " Jan Kaessens, Eike Matthias Wacker, Lars Wienbrandt & David Ellinghaus"
	homePage = "https://github.com/ikmb/gwas-assoc"
	nextflowVersion = ">=21.10.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_dag.svg"
}

profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
    includeConfig 'conf/resources.config'
	}
	local {
                includeConfig 'conf/base.config'
                includeConfig 'conf/local.config'
                includeConfig 'conf/resources.config'
	}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
